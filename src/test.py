f=open('/apps/flappy_badge/__init__.py', 'wt')
f.write(r'import defines\r\nimport rgb\r\nimport buttons\r\nimport system\r\nimport machine\r\nfrom time import sleep\r\n\r\nexit = 1\r\nscore = 0\r\nwidth = 32\r\nheight = 8\r\nplayerY = 3.0\r\nplayerX = 6\r\nplayerVelocity = 0.0\r\nplayerJumpVelocity = 0.7\r\nbtnPressed = -1\r\ngravity = 0.32\r\nscore = 0\r\ncurrentHighscore = 0\r\nhighscoreDrawX = 0\r\nscoreDrawX = 0\r\nnewHighscore = 0\r\npauseA = None\r\n\r\ntest = "Negeren die boel"\r\n#initiële positie van de pijpen initiëren \r\npipeList = [[31, machine.random(1, 5)], [42, machine.random(1, 5)], [\r\n                                53, machine.random(1, 5)]]\r\n\r\n#A knop afvangen en onnodige fix voor als er 2 events in 1 frame plaatsvinden\r\ndef input_A(pressed):\r\n	global btnPressed\r\n	global pauseA\r\n	if pauseA == True:\r\n		return\r\n	if btnPressed == defines.BTN_A:\r\n		print("Not handled")\r\n	else:\r\n		global playerVelocity\r\n		playerVelocity = playerJumpVelocity\r\n	print("Pressed")\r\n	btnPressed = defines.BTN_A\r\n\r\n#Render de speler pixel en elke pijp\r\ndef render():\r\n	rgb.clear()\r\n	rgb.pixel((100, 70, 150), (int(playerX), int(playerY)))\r\n	for x in pipeList:\r\n		drawPipe(x[0], x[1])\r\n\r\n#Pijp tekenen op de desbetreffende X positie en een gat van 3 pixels maken om de gate waarde\r\ndef drawPipe(positionX, gate):\r\n    for x in range(height):\r\n        if x != gate-1 and x != gate and x != gate+1:\r\n            rgb.pixel((140, 45, 40), (positionX, x))\r\n\r\n#Score tekenen en afhankelijk van de score de positie en de duratie van de pauze aanpassen\r\ndef showScore():\r\n	global score\r\n	global currentHighscore\r\n	global btnPressed\r\n	global pauseA\r\n	#Geen scoren dan gelijk terug naar de game\r\n	if score != 0:\r\n		rgb.clear()\r\n		\r\n		checkHighscore(score)\r\n\r\n		highscoreDrawX = 22\r\n		if currentHighscore >= 10:\r\n			highscoreDrawX = 19\r\n		\r\n		scoreDrawX = 5\r\n		if score >= 10:\r\n			scoreDrawX = 2	\r\n		\r\n		if newHighscore:\r\n			rgb.text(str(currentHighscore), (30, 120, 60),  (highscoreDrawX, 0))\r\n			rgb.text(str(score), (30, 120, 60),  (scoreDrawX, 0))\r\n		else:\r\n			rgb.text(str(currentHighscore), (170, 10, 50),  (highscoreDrawX, 0))\r\n			rgb.text(str(score), (90, 30, 90),  (scoreDrawX, 0))\r\n\r\n		#Scheidingslijn tekenen\r\n		for i in range(2):\r\n			for j in range(8):\r\n				rgb.pixel((100, 100, 100), (15+i, j))\r\n\r\n		#Spullllll\r\n		pauseA = True\r\n		sleep(0.2)\r\n\r\n		while btnPressed != defines.BTN_A:\r\n			\r\n			#Wait for A press to continue \r\n			pauseA = None\r\n\r\n			if btnPressed == defines.BTN_A:\r\n				print("Breakout")\r\n				break\r\n\r\n		resetGame()\r\n	else:\r\n		resetGame()\r\n\r\n#Check of de nieuwe score hoger is dan de huidige Highscore (Toekomstig update met lokaal opgeslagen highscore)\r\ndef checkHighscore(reachedScore):\r\n	global newHighscore\r\n	global currentHighscore \r\n\r\n	if currentHighscore < reachedScore:\r\n			newHighscore = 1\r\n			currentHighscore = reachedScore\r\n			machine.nvs_setint('flappyScore', 'highscore', reachedScore)\r\n	else:\r\n		newHighscore = 0\r\n	#data = machine.nvs_getint('my_namespace', 'my_keyname')\r\n\r\ndef loadHighscore():\r\n	global currentHighscore\r\n	currentHighscore = machine.nvs_getint('flappyScore', 'highscore')\r\n	if currentHighscore == None:\r\n		currentHighscore = 0\r\n		machine.nvs_setint('flappyScore', 'highscore', 0)\r\n	print(currentHighscore)\r\n\r\n#Alles weer terugzetten naar begin waardes\r\ndef resetGame():\r\n	global pipeList\r\n	pipeList=[[31, machine.random(1, 5)], [42, machine.random(1, 5)], [53, machine.random(1, 5)]]\r\n	global playerY\r\n	playerY=3.0\r\n	global playerX\r\n	playerX=6\r\n	global playerVelocity\r\n	playerVelocity=0.0\r\n	global playerJumpVelocity\r\n	playerJumpVelocity=0.7  # 0.8\r\n	global btnPressed\r\n	btnPressed=-1\r\n	global score\r\n	score=0\r\n\r\n# Button events registreren\r\nbuttons.register(defines.BTN_A, input_A)\r\n\r\n# Highscore inladen vanuit de local storage\r\nloadHighscore()\r\n\r\nwhile exit != 0:  # Zolang er geen B gedrukt wordt run de loop\r\n\r\n# Logica\r\n\r\n# Input uitlezen en consume\r\n	if btnPressed == defines.BTN_A:\r\n		btnPressed=-1\r\n\r\n# Movement player aanpassen\r\n	playerVelocity=playerVelocity * gravity\r\n	playerVelocity=playerVelocity - 0.2\r\n	playerY -= playerVelocity\r\n\r\n# Pijpen checken en eventueel weghalen/nieuwe spawnen\r\n	for pipe in pipeList:\r\n		pipe[0] -= 1\r\n		if pipe[0] < 0:\r\n			pipe[0] += 32\r\n			pipe[1]=machine.random(1, 6)\r\n		if pipe[0] == playerX:\r\n			if int(playerY) >= pipe[1]-1 and int(playerY) <= pipe[1] + 1:\r\n				# Pijp gehaald\r\n				score += 1\r\n			else:\r\n				# Dood\r\n				showScore()\r\n\r\n# Render\r\n	render()\r\n	sleep(0.06)\r\n')
f.close()